<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_Station_04_SW_Separate" Id="{83cb1f51-0aba-4af0-8ed4-8e91e0a37b74}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Station_04_SW_Separate EXTENDS FB_StationBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ClearList" Id="{9306df3c-6546-497d-8b1c-64f68fe88c7e}">
      <Declaration><![CDATA[METHOD ClearList : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.ClearList();
// Add aditional Data to Clear in Reset
// List and State will be cleared in master class
ClearList := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Processing" Id="{3ef48663-7cb3-4b89-b80e-cd7e69121abc}">
      <Declaration><![CDATA[METHOD Processing : BOOL
VAR_INPUT
	i_nMachineState 	: INT;		// 1=starting, 2=Running
END_VAR


VAR_INST



	nMoverIndex						: UINT;
	fPositionOnTrack				: LREAL;
	nCurrentTrackIndex				: UDINT;
	fStationPositionOnTrack			: LREAL;
	nStationIndex					: UINT;
	
	nTrackNextStationPositionB		: UINT;
	nTrackNextStationPositionC		: UINT;	
	nNextStationIndexOutputB		: UINT;
	nNextStationIndexOutputC		: UINT;
	nTrackIndexOutputB				: UINT;
	nTrackIndexOutputC				: UINT;
	fSendAwayPositionOutputB		: LREAL;
	fSendAwayPositionOutputC		: LREAL;
	nNextStationIndex				: UINT;
	bSendToOutputB					: BOOL;
	bSendToOutputC					: BOOL;	
	fOutOfRangePosition				: LREAL;
	fMoverSpace						: LREAL;
	
	ClearTrig						: R_TRIG;
		
	nTrackindex						: UINT;
	fMoverPosition					: LREAL;
	fMoverVelocity					: LREAL;
	fMoverAcceleration				: LREAL;
	fMoverJerk						: LREAL;
	strInfo							: STRING;
	
	nErrorId						: UDINT;
	nObjectID						: UDINT;
	nObjectType						: UDINT;	
	
	nDestinationProcess				: UINT;
	nIncommingTrackOID				: UDINT;
			 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Station - Switch-Seperate


ClearTrig(CLK:=bClearStation);
IF ClearTrig.Q THEN
	nState := 10;	
END_IF

CASE nState OF
	

	0:	// Waiting for initialization
		nState := 10;


	10:	// Init Station Parameters
				   nStationIndex := 4;		
		nNextStationIndexOutputB := 3;		
			  nTrackIndexOutputB := 3;		
		nNextStationIndexOutputC := 2;	
			  nTrackIndexOutputC := 2;	
			    	 fMoverSpace := 155 + 5.0;		
	    fSendAwayPositionOutputB := ipTrack[nTrackIndexOutputB].P_TrackLength/2 - fMoverSpace;		
		fSendAwayPositionOutputC := ipTrack[nTrackIndexOutputB].P_TrackLength/2 - fMoverSpace;		
			
		bClearStation := FALSE;
			   nState := 11;
	
	11: // Fail-safe check, just to make sure all variables have been assigned after doing copy&paste from the template	
		IF             nStationIndex > 0
		AND nNextStationIndexOutputB > 0
		AND       nTrackIndexOutputB > 0
		AND nNextStationIndexOutputC > 0 
		AND       nTrackIndexOutputC > 0 
		AND              fMoverSpace > 0
		AND fSendAwayPositionOutputB > 0
		AND fSendAwayPositionOutputC > 0
		AND              fMoverSpace > 0
		THEN
			nState := 20;
		END_IF

		
	20:	// Calculating station x-y-position 
		PositionOnTrack.fPositionOnTrack := 0.0;
		PositionOnTrack.nTrackId		 := UINT_TO_INT(nTrackIndexOutputB);
		ipTrack[PositionOnTrack.nTrackId].std.GetMoverPositionAt(PositionOnTrack.fPositionOnTrack, StationPosition);
		VisuPosX := StationPosition.x;
		VisuPosY := StationPosition.y;
		nState := 100;

			
		100: // Waiting for Mover
			IF P_List.P_FirstInList <> 0 THEN
				nMoverIndex := P_List.P_FirstInList.P_Id;
				nState := 110;
			END_IF
	
	
	110: // Decide to which Station the mover has to travel to next.	
			nDestinationProcess := ipMoverApplication[nMoverIndex].ProductData.nDestinationProcess;	
			nIncommingTrackOID	:= ipMoverApplication[nMoverIndex].std.P_SetOnTrack.TrackOID;
			nTrackindex := 0;
						
			CASE nDestinationProcess OF
			0: // -> OutputB
				nNextStationIndex  := nNextStationIndexOutputB;
				fMoverPosition     := fSendAwayPositionOutputB;
				nTrackindex        := nTrackIndexOutputB;		
		
			2: // -> OutputC
				nNextStationIndex  := nNextStationIndexOutputC;
				fMoverPosition     := fSendAwayPositionOutputC;
				nTrackindex        := nTrackIndexOutputC;				
	
			3: // -> OutputB
				nNextStationIndex  := nNextStationIndexOutputB;
				fMoverPosition     := fSendAwayPositionOutputB;
				nTrackindex        := nTrackIndexOutputB;		
			END_CASE
			
			IF nTrackindex > 0 THEN
				nState := 200;	
			END_IF


		

	200: 	// Send mover to the next station
			fMoverVelocity     :=    300.0;
			fMoverAcceleration :=  1_000.0;
			fMoverJerk         := 10_000.0;	
	
			stMoveParameters.direction := Tc3_Mc3PlanarMotion.MC_DIRECTION.mcDirectionPositive;
			stMoveParameters.gap       := 240.0;
		
			strInfo := CONCAT('Station: ', UINT_TO_STRING(nStationIndex));
			strInfo := CONCAT(strInfo, ' move to next Station:' );
			strInfo := CONCAT(strInfo, UINT_TO_STRING(nNextStationIndex));
		
	
			IF NOT ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Error THEN

				FOR idx:=10 TO 1 BY -1 DO 
					strInfoHistory[idx] := strInfoHistory[idx-1];
				END_FOR
				strInfoHistory[0] := strInfo;

		
				ipMoverApplication[nMoverIndex].std.MoveOnTrack( strInfo,
																 ipTrack[nTrackindex].std,
																 fMoverPosition,
																 fMoverVelocity,
																 fMoverAcceleration,
																 fMoverJerk,
																 stMoveParameters.gap,
																 stMoveParameters.direction);
																 																			 
		   		 nState := nState +1;
				 
			ELSIF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Error THEN
				   nErrorID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.ErrorID;
				  nObjectID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectID;
				nObjectType := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectType;				
			END_IF
		

			
	201: 	IF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Active
			OR ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Done 
			THEN
				nState := 210;
				
			ELSIF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Error THEN
				
				   nErrorID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.ErrorID;
				  nObjectID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectID;
				nObjectType := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectType;
			END_IF			
	

	210: // Check if Mover passed the junction point		
			IF ipMoverApplication[nMoverIndex].std.P_SetOnTrack.TrackOID <> nIncommingTrackOID THEN 
				nState := 220;
			END_IF

	
	220: // Mover to the list of the next station
		ipStation[nNextStationIndex].P_List.AddMover(P_List.RemoveFirstInList());
		nState := 500;	
	
		
	500: // done for this cycle
		nState := 100;

END_CASE





















]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>