<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_Station_xx_Process" Id="{46808953-082a-4451-a082-9fe041828666}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Station_xx_Process EXTENDS FB_StationBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ClearList" Id="{86347f18-6241-451d-82d9-76ac2cf48292}">
      <Declaration><![CDATA[METHOD ClearList : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.ClearList();
// Add aditional Data to Clear in Reset
// List and State will be cleared in master class
ClearList := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Processing" Id="{f2cd765f-d651-4c02-a499-7b0b3b320277}">
      <Declaration><![CDATA[METHOD Processing : BOOL
VAR_INPUT
	i_nMachineState 	: INT;		// 1=starting, 2=Running
END_VAR



VAR_INST

	bToggleSwitch	: BOOL;
	bStationActive				: BOOL;

	nMoverIndex					: UINT;
	fPositionOnTrack			: LREAL;
	nCurrentTrackIndex			: UDINT;
	
	nStationIndex				: UINT;
	nNextStationIndex			: UINT;
	nStationTrackIndex			: UINT;
	fStationPositionOnTrack		: LREAL;
	fSendAwayPosition			: LREAL;
	fInRangePosition			: LREAL;
	fOutOfRangePosition			: LREAL;
	
	fMoverPosition				: LREAL;
	nTrackIndex					: UINT;
	fMoverVelocity				: LREAL;
	fMoverAcceleration			: LREAL;
	fMoverJerk					: LREAL;
	strInfo						: STRING;
	
	nErrorId					: UDINT;
	nObjectID					: UDINT;
	nObjectType					: UDINT;						
	
	Timer01						: TON;
	ClearTrig					: R_TRIG;
	
	TrackInfo					: PlanarObjectInfo;
	nStationTrackID				: UDINT;
	nMoverOnTrackID				: UDINT;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

// *** Processing Station ***

ClearTrig(CLK:=bClearStation);
IF ClearTrig.Q THEN
	nState := 10;	
END_IF


CASE nState OF

	0:		// Waiting for initialization	
			nState := 10;

	10:		// Init Station-Parameters				
				      nStationIndex := 0;	// ***HINT*** Station-Paramater to be defined 
			     nStationTrackIndex := 0;	// ***HINT*** Station-Paramater to be defined 
			      nNextStationIndex := 0;	// ***HINT*** Station-Paramater to be defined 
			fStationPositionOnTrack := 0;	// ***HINT*** Station-Paramater to be defined 
				  fSendAwayPosition := 0; 	// ***HINT*** Station-Paramater to be defined 
										
			bClearStation := FALSE;
				   nState := 11;

	11: // Fail-safe check, just to make sure all variables have been assigned after doing copy&paste from the template
			IF            nStationIndex > 0
			AND      nStationTrackIndex > 0
			AND       nNextStationIndex > 0
			AND fStationPositionOnTrack > 0
			AND       fSendAwayPosition > 0
			THEN   
				nState := 20;
			END_IF
			
				   
	20:		// Calculating station x-y-position 
			PositionOnTrack.fPositionOnTrack := fStationPositionOnTrack;
 			PositionOnTrack.nTrackId		 := UINT_TO_INT(nStationTrackIndex);
			ipTrack[PositionOnTrack.nTrackId].std.GetMoverPositionAt(PositionOnTrack.fPositionOnTrack, StationPosition);
			VisuPosX := StationPosition.x;
			VisuPosY := StationPosition.y;
			nState := 100;

		
	100: 	// Waiting for Mover
			IF P_List.P_FirstInList <> 0 THEN
					   nMoverIndex := P_List.P_FirstInList.P_Id;
							nState := 110;
			END_IF
	
		
	110: 	// Check if Mover is in range
			TrackInfo := ipTrack[nStationTrackIndex].std.P_Info;
			nStationTrackID := TrackInfo.Id;
			nMoverOnTrackID := ipMoverApplication[nMoverIndex].std.P_SetOnTrack.TrackOID;
			IF nStationTrackID = nMoverOnTrackID  THEN
				nCurrentTrackIndex := nMoverOnTrackID;
							nState := 120;		
			ELSE
				nState := 100;
			END_IF
		
		
	120: 	// Checking product properties
			IF i_nMachineState = 1  THEN    // 1=starting, 2=Running
				IF nStationIndex = 1 THEN
					ipMoverApplication[nMoverIndex].ProductData.bInitRun := FALSE;
				ELSE
					nState := 220;
				END_IF
			ELSIF i_nMachineState = 2 THEN  // 1=starting, 2=Running
				nState := 200;
			ELSE
				nState := 20;	
			END_IF			
		
		
	200: 	// Send mover to Processing-Position
			fMoverPosition     := fStationPositionOnTrack;
			nTrackIndex        := nStationTrackIndex;
			fMoverVelocity     :=    300.0;
			fMoverAcceleration :=  1_000.0;
			fMoverJerk         := 10_000.0;	
	
			stMoveParameters.direction := Tc3_Mc3PlanarMotion.MC_DIRECTION.mcDirectionPositive;
			stMoveParameters.gap       := 240.0;
		
			strInfo := CONCAT('Station: ', UINT_TO_STRING(nStationIndex));
			strInfo := CONCAT(strInfo, ' to processing position');

			
			IF NOT ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Error THEN
	
				FOR idx:=10 TO 1 BY -1 DO 
					strInfoHistory[idx] := strInfoHistory[idx-1];
				END_FOR
				strInfoHistory[0] := strInfo;		

	
				ipMoverApplication[nMoverIndex].std.MoveOnTrack( strInfo,
																 ipTrack[nTrackIndex].std,
																 fMoverPosition,
																 fMoverVelocity,
																 fMoverAcceleration,
																 fMoverJerk,
																 stMoveParameters.gap,
																 stMoveParameters.direction);
				nState := nState +1;
				
			ELSIF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Error THEN
				   nErrorID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.ErrorID;
				  nObjectID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectID;
				nObjectType := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectType;				
			END_IF
		
		
	201: 	IF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Done THEN
				nState := 210;
			ELSIF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Error THEN
				   nErrorID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.ErrorID;
				  nObjectID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectID;
				nObjectType := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectType;
			END_IF		
		
		
	210: 	// do process
			Timer01(IN:=TRUE, PT:=T#1S);
			IF Timer01.Q THEN
				Timer01(IN:=FALSE);	
						
				IF nStationIndex = 1 THEN	
					// Station 1 toggeling mover destination to Station2 or Station3
					IF bToggleSwitch THEN
						ipMoverApplication[nMoverIndex].ProductData.nDestinationProcess := 2;
					ELSE
						ipMoverApplication[nMoverIndex].ProductData.nDestinationProcess := 3;		
					END_IF
					bToggleSwitch := NOT bToggleSwitch;					
				ELSE
					ipMoverApplication[nMoverIndex].ProductData.nDestinationProcess := 1;
				END_IF	
				
				nState := 220;
			END_IF

		
	220: 	// Send mover to the next station
			fMoverPosition     := fSendAwayPosition;	
			nTrackIndex        := nStationTrackIndex;		
			fMoverVelocity     :=    300.0;
			fMoverAcceleration :=  1_000.0;
			fMoverJerk         := 10_000.0;	
	
			stMoveParameters.direction := Tc3_Mc3PlanarMotion.MC_DIRECTION.mcDirectionPositive;
			stMoveParameters.gap       := 240.0;
			
			strInfo := CONCAT('Station: ', UINT_TO_STRING(nStationIndex));
			strInfo := CONCAT(strInfo, ' move to next Station:' );
			strInfo := CONCAT(strInfo, UINT_TO_STRING(nNextStationIndex));

			
			IF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Done THEN

				FOR idx:=10 TO 1 BY -1 DO 
					strInfoHistory[idx] := strInfoHistory[idx-1];
				END_FOR
				strInfoHistory[0] := strInfo;		
			
				ipMoverApplication[nMoverIndex].std.MoveOnTrack( strInfo,
																 ipTrack[nTrackIndex].std,
																 fMoverPosition,
																 fMoverVelocity,
																 fMoverAcceleration,
																 fMoverJerk,
																 stMoveParameters.gap,
																 stMoveParameters.direction);
				nState := nState +1;
			END_IF		
		
		
	221: 	IF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Active
			OR ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Done 
			THEN
				nState := 230;
			ELSIF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Error THEN
				
				   nErrorID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.ErrorID;
				  nObjectID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectID;
				nObjectType := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectType;
			END_IF		
		
			
	230: 	// Mover to the list of the next station
			ipStation[nNextStationIndex].P_List.AddMover(P_List.RemoveFirstInList());
			nState := 500;	
	
		
	500: 	// Done for this cycle
			nState := 100;

END_CASE





]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Station_xx_Process">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Station_xx_Process.ClearList">
      <LineId Id="5" Count="3" />
    </LineIds>
    <LineIds Name="FB_Station_xx_Process.Processing">
      <LineId Id="3151" Count="206" />
      <LineId Id="340" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>