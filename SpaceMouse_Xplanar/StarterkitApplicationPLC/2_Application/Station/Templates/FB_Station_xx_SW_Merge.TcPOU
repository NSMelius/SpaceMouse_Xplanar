<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_Station_xx_SW_Merge" Id="{42ce77df-016f-4f9b-acdc-7ceff60e0a3f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Station_xx_SW_Merge EXTENDS FB_StationBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ClearList" Id="{dc6f3ba7-d2db-4bbb-8a17-d3ec863699b8}">
      <Declaration><![CDATA[METHOD ClearList : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.ClearList();
// Add aditional Data to Clear in Reset
// List and State will be cleared in master class
ClearList := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Processing" Id="{bb40a6af-b212-41f6-a6da-703ad00c6fac}">
      <Declaration><![CDATA[METHOD Processing : BOOL
VAR_INPUT
	i_nMachineState 	: INT;		// 1=Starting, 2=Running
END_VAR

VAR_INST
	
	ClearTrig					: R_TRIG;
	
	fStationPositionOnTrack		: LREAL;

	nStationIndex				: UINT;
	nNextStationIndex			: UINT;
	nNextStationTrackIndex		: UINT;
	nMoverIndex					: UINT;
	nNextStationIndexOutputA	: UINT;
	nTrackIndexOutputA			: UINT;	
	fSendAwayPositionOutputA	: LREAL;	

	nMoverIndexInputB			: UINT;
	nMoverIndexInputC			: UINT;
	nTrackIndex					: UINT;
	fMoverPosition				: LREAL;
	fMoverVelocity				: LREAL;
	fMoverAcceleration			: LREAL;
	fMoverJerk					: LREAL;
	nIncommingTrackOID			: UDINT;
	
	nErrorId					: UDINT;
	nObjectID					: UDINT;
	nObjectType					: UDINT;	
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Station - Switch-Merge	


ClearTrig(CLK:=bClearStation);
IF ClearTrig.Q THEN
	nState := 10;	
END_IF

CASE nState OF
	
	0:	// Waiting for initialization
		nState := 10;
	

	
	10:	// Init Station-Parameters	
					   nStationIndex := 0;		
			nNextStationIndexOutputA := 0;	
				  nTrackIndexOutputA := 0;		
			fSendAwayPositionOutputA := 0.0;			
				
			bClearStation := FALSE;
			       nState := 11;

	11: // Fail-safe check, just to make sure all variables have been assigned after doing copy&paste from the template
		IF             nStationIndex > 0
		AND nNextStationIndexOutputA > 0
		AND       nTrackIndexOutputA > 0
		AND fSendAwayPositionOutputA > 0 
		THEN
			nState := 20;
		END_IF

		
	20:	// Calculating station x-y-position 
		PositionOnTrack.fPositionOnTrack := 0.0;
		PositionOnTrack.nTrackId		 := UINT_TO_INT(nTrackIndexOutputA);
		ipTrack[PositionOnTrack.nTrackId].std.GetMoverPositionAt(PositionOnTrack.fPositionOnTrack, StationPosition);
		VisuPosX := StationPosition.x;
		VisuPosY := StationPosition.y;
		nState := 100;
			   
		
	100: // Waiting for Mover on Input_B or Input_C
		IF P_List.P_FirstInList = 0 THEN
			nMoverIndexInputB := 0;
			nMoverIndexInputC := 0;
		
			IF P_List_Input_B.P_FirstInList <> 0 THEN
				nMoverIndexInputB := P_List_Input_B.P_FirstInList.P_Id;
			END_IF		
			
			IF P_List_Input_C.P_FirstInList <> 0 THEN
				nMoverIndexInputC := P_List_Input_C.P_FirstInList.P_Id;
			END_IF				
			
			IF nMoverIndexInputB > 0 
			OR nMoverIndexInputC > 0
			THEN
				 nState := 110;
			END_IF
		ELSE
			nState := 120;
		END_IF
		
		
	110: // Priority: B comes first  
		IF nMoverIndexInputB > 0 THEN
			P_List.AddMover(P_List_Input_B.RemoveFirstInList());
		ELSE
			P_List.AddMover(P_List_Input_C.RemoveFirstInList());
		END_IF	
		nState := 120;
		
		
	120: // Processing mover to next Station
		IF P_List.P_FirstInList <> 0 THEN
			       nMoverIndex := P_List.P_FirstInList.P_Id;
			nIncommingTrackOID := ipMoverApplication[nMoverIndex].std.P_SetOnTrack.TrackOID;
			            nState := 200;
		END_IF
		
			 
	200: 	// Send mover to the next station output A
			nNextStationIndex  := nNextStationIndexOutputA;
			nTrackIndex 	   := nTrackIndexOutputA;			
			fMoverPosition     := fSendAwayPositionOutputA;
			fMoverVelocity     :=    300.0;
			fMoverAcceleration :=  1_000.0;
			fMoverJerk         := 10_000.0;	
	
			stMoveParameters.direction := Tc3_Mc3PlanarMotion.MC_DIRECTION.mcDirectionPositive;
			stMoveParameters.gap       := 240.0;
		
			strInfo := CONCAT('Station: ', UINT_TO_STRING(nStationIndex));
			strInfo := CONCAT(strInfo, ' move to next Station:' );
			strInfo := CONCAT(strInfo, UINT_TO_STRING(nNextStationIndex));
			

			
	
			IF NOT ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Error THEN

				FOR idx:=10 TO 1 BY -1 DO 
					strInfoHistory[idx] := strInfoHistory[idx-1];
				END_FOR
				strInfoHistory[0] := strInfo;				

				ipMoverApplication[nMoverIndex].std.MoveOnTrack( strInfo,
																 ipTrack[nTrackIndex].std,
																 fMoverPosition,
																 fMoverVelocity,
																 fMoverAcceleration,
																 fMoverJerk,
																 stMoveParameters.gap,
																 stMoveParameters.direction);
																 
																 
			ipMoverApplication[nMoverIndex].P_nTrackId := nNextStationTrackIndex;
															 
		    nState := nState +1;
			
			ELSIF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Error THEN
				   nErrorID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.ErrorID;
				  nObjectID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectID;
				nObjectType := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectType;				
			END_IF			
			

	201: 	IF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Error THEN
				   nErrorID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.ErrorID;
				  nObjectID := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectID;
				nObjectType := ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.stInfo.nObjectType;		
			ELSE
				IF ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Active 
				OR ipMoverApplication[nMoverIndex].std.P_MoveOnTrack.Done
				THEN
					nState := 210;
				END_IF
			END_IF

			
	210: // Check if Mover passed the junction point		
		IF ipMoverApplication[nMoverIndex].std.P_SetOnTrack.TrackOID <> nIncommingTrackOID THEN 
			nState := 220;
		END_IF
	
	
	220: // Check if Mover is out of range
		IF ipMoverApplication[nMoverIndex].std.P_SetOnTrack.SetPos > 120.0 THEN 
			nState := 230;
		END_IF

	
	230: // Mover to the list of the next station
		ipStation[nNextStationIndex].P_List.AddMover(P_List.RemoveFirstInList());
		nState := 500;	
	
		
	500: // done for this cycle
		nState := 100;
		
	
END_CASE


]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Station_xx_SW_Merge">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Station_xx_SW_Merge.ClearList">
      <LineId Id="5" Count="3" />
    </LineIds>
    <LineIds Name="FB_Station_xx_SW_Merge.Processing">
      <LineId Id="1922" Count="95" />
      <LineId Id="2020" Count="70" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>