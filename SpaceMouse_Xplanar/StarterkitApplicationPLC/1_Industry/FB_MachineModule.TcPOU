<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_MachineModule" Id="{9d04cc3f-f9a8-4a65-8e6a-8b7238a97dd7}" SpecialFunc="None">
    <Declaration><![CDATA[
//The functionblock FB_Generick is transmitted to every Machine-Unit

FUNCTION_BLOCK FB_MachineModule 

VAR
//===== application layer =================================

	fbMotionSystem			: FB_MotionSystem;
 	{IF defined (XPlanar)}
	fbXPlanarSystem			: FB_XPlanarSystem;
	{ELSIF defined (XTS)}
	fbXtsSystem				: FB_XtsSystem;
	{END_IF}

	fbMover					: ARRAY [1..MaxMovers] OF FB_ApplicationMover;
	{IF defined (XPlanar)}
	fbXPlanarMover			: ARRAY [1..MaxMovers] OF FB_XPlanarMoverStandard; 
	{ELSIF defined (XTS)}	
	fbXtsMover				: ARRAY [1..moverCount] OF FB_XtsMover; 	
	{END_IF}

	// Instances of Track-FBs
	fbTrackSegment01		: FB_TrackSegment_1;
	fbTrackSegment02		: FB_TrackSegment_2;
	fbTrackSegment03		: FB_TrackSegment_3;
	   
	// Instances of Station-FBs
	fbStation_01_Process 	: FB_Station_01_Process;
	fbStation_02_Process 	: FB_Station_02_Process;
	fbStation_03_Process	: FB_Station_03_Process;
	fbStation_04_Switch		: FB_Station_04_SW_Separate;
	fbStation_05_Switch		: FB_Station_05_SW_Merge;
	
	
//=========================================================

	tonPowerOnDelayOff		: TON;
	bPowerOnDelayOff		: BOOL;
	ObPowerOn	AT%Q* : BOOL := FALSE;

//===== base module =======================================
	eXCommand					: E_XMotion_Command;
	eXStatus					: E_XMotion_Status;
	eLastXState					: E_XMotion_Status;	

	
	fbStateManager				: FB_SK_StateManager;
	eControlCommand				: E_XMotion_Command;
	stSequenceStates 			: ST_XMotionStatemachineStates;
	
	nStateCommandCheck			: INT;
	bMachineExceptionPending	: BOOL;
	
	bUnitModeManagerExecute		: BOOL;
	bUnitModeManagerDone		: BOOL;
	bUnitModeManagerError		: BOOL;
	
	DelayTimerDemo				: TON;
	
	nStateSequence				: INT;
	nStateExecute				: INT;
	bInterfaceAssignmentDone	: BOOL;
	bDone						: BOOL;
	
	nProcessFeedback			: UDINT;
	bErrorQuit					: BOOL;
	
	nForCounter					: UDINT;

	
	// ...just for testing 
	nTestCounter_Cycle				: UINT;
	nTestCounter_Aborted			: UINT;
	nTestCounter_Aborting			: UINT;
	nTestCounter_Execute			: UINT;
	nTestCounter_Preparing			: UINT;
	nTestCounter_Prepared			: UINT;
	nTestCounter_Resetting 			: UINT;
	nTestCounter_StartUp			: UINT;
	nTestCounter_StateComplete 		: UINT;
	nTestCounter_Stopped			: UINT;
	nTestCounter_CommandReceive		: UINT;	
	
	fbVisu : FB_XPlanarVisuDiag;
	
	binit : BOOL;
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Prop" Id="{21ad6861-ef26-4ca3-ac30-58543a127d20}" />
    <Folder Name="StateMachine" Id="{d46563a2-4a16-4199-aa3b-63fa5e7d9de9}" />
    <Method Name="Aborted" Id="{bb0a8afc-a001-4a9e-bdd9-251a693b72e3}" FolderPath="StateMachine\">
      <Declaration><![CDATA[{attribute 'object_name' := 'Aborted'}
METHOD PRIVATE Aborted
]]></Declaration>
      <Implementation>
        <ST><![CDATA[


	nTestCounter_Aborted := nTestCounter_Aborted + 1;
	
	(*
		Aborted:
		- all movers deactivated
		- No errors pending
	*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="Aborting" Id="{4ae1312c-5c2f-4389-b4cb-c3c86bbe993f}" FolderPath="StateMachine\">
      <Declaration><![CDATA[{attribute 'object_name' := 'Aborting'}
METHOD PRIVATE Aborting]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nStateSequence OF
	0: 		
		IF ipMotionSystemApplication <> 0 THEN
			nStateSequence := 10;
		END_IF


	10:	
		bDone := ipMotionSystemApplication.Aborting();

		IF bDone THEN
			nStateSequence := 100;
		END_IF

	100:
		StateComplete();
END_CASE	]]></ST>
      </Implementation>
    </Method>
    <Property Name="bExternelStop" Id="{99e364f8-1168-40cf-b636-8a03cda463c9}" FolderPath="Prop\">
      <Declaration><![CDATA[PROPERTY bExternelStop : BOOL]]></Declaration>
      <Get Name="Get" Id="{a6075b6b-46a7-4a2d-98cd-5d999e862669}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{63ceac48-19e8-43f4-8822-a33433eb8ff9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="CommandReceive" Id="{7fd73fee-c05c-405e-8f99-d8c480804688}">
      <Declaration><![CDATA[METHOD PRIVATE CommandReceive 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

	nTestCounter_CommandReceive := nTestCounter_CommandReceive + 1;


	
	// Checking Statecommands and reacting to received Control-Commands
	CASE nStateCommandCheck OF
	
	
	0:  // Check
		IF NOT bMachineExceptionPending THEN
			nStateCommandCheck:= 10;   	// No error
		ELSE
			nStateCommandCheck:= 20;	// Error pending
		END_IF
	
		
	10:	// No Machine-Error 
		
		CASE eXCommand OF 		// XTags.eCommand received from superior system e.g. Machine-HMI

		E_XMotion_Command.NoCommand:
				eControlCommand := E_XMotion_Command.NoCommand;
		
		E_XMotion_Command.Abort:
				eControlCommand := E_XMotion_Command.Abort;
		
		E_XMotion_Command.Reset: 
				IF eXStatus = E_XMotion_Status.Aborted THEN
					eControlCommand := E_XMotion_Command.Reset;
				END_IF		
		
		E_XMotion_Command.Prepare:
				IF eXStatus = E_XMotion_Status.Stopped THEN
					eControlCommand := E_XMotion_Command.Prepare;
				END_IF
	
		E_XMotion_Command.Start:	
				IF eXStatus = E_XMotion_Status.Prepared THEN
					eControlCommand := E_XMotion_Command.Start;
				END_IF		
			
		E_XMotion_Command.HoldOnError:
				eControlCommand := E_XMotion_Command.HoldOnError;

				
		E_XMotion_Command.UserCommand:
				;
		
		// Rückmeldung wenn/warum ein Command nicht ausgeführt wurde		
							
		END_CASE
				
		nStateCommandCheck := 0;	
	
		
	20:  // Machine-Error reaction
		   eControlCommand := E_XMotion_Command.Abort;
		nStateCommandCheck := nStateCommandCheck + 1;	
		
	21: IF XTags.Status = E_XMotion_Status.Aborted THEN
			nStateCommandCheck := nStateCommandCheck + 1;
		END_IF		
			
	22:	IF NOT bMachineExceptionPending THEN
			nStateCommandCheck := 10;
		END_IF
		
		
	END_CASE
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cycle" Id="{e47be106-7bd7-49f9-8f51-2792c301a97c}">
      <Declaration><![CDATA[METHOD PUBLIC Cycle
VAR
	nForCounter : UDINT;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	{IF defined (XPlanar)}	
	fbMotionSystem.std := THIS^.fbXPlanarSystem;
	{ELSIF defined (XTS)}
	fbMotionSystem.std := THIS^.fbXtsSystem;
	{END_IF}


	// Checking for command received by superior unit e.g. HMI
	CommandReceive();
		
	// fbStateManager manages the state to be executed:
	fbStateManager.Cycle();	
	fbStateManager.XMotionCommand := eControlCommand;
	eXStatus := fbStateManager.Status;
						
	IF eXStatus <> eLastXState THEN
		nStateSequence := 0;
		eLastXState := eXStatus;
	END_IF

	// One of the methods is executing by the actual status
	CASE eXStatus OF
		E_XMotion_Status.StartUp:	        StartUp();
		E_XMotion_Status.Aborting:         Aborting();
		E_XMotion_Status.Aborted:           Aborted();
		E_XMotion_Status.Resetting:       Resetting();
		E_XMotion_Status.Stopped:           Stopped();
		E_XMotion_Status.Preparing:       Preparing();
		E_XMotion_Status.Prepared:         Prepared();
		E_XMotion_Status.Execute:	   		Execute();
		E_XMotion_Status.HoldOnError:	HoldOnError();
	END_CASE

	// E-Stop PowerOff
	tonPowerOnDelayOff(IN:=eXStatus=E_XMotion_Status.Aborting OR eXStatus=E_XMotion_Status.Aborted OR eXStatus=E_XMotion_Status.StartUp , PT:=T#5H , Q=> , ET=> );
	bPowerOnDelayOff := NOT tonPowerOnDelayOff.Q;
	ObPowerOn := bPowerOnDelayOff;
	
	// Information to visulization etc.
	IF ipMotionSystemApplication <> 0 THEN 
		stSequenceStates.nAbortState   := UDINT_TO_INT(ipMotionSystemApplication.P_nAbortingSequence); 
		stSequenceStates.nResetState   := UDINT_TO_INT(ipMotionSystemApplication.P_nResettingSequence);
		stSequenceStates.nPrepareState := UDINT_TO_INT(ipMotionSystemApplication.P_nStartingSequence);
		stSequenceStates.nStartState   := UDINT_TO_INT(ipMotionSystemApplication.P_nExecutingSequence);
	END_IF	
	
	
	
	// Keeping all cyclic activities alive
	IF ipMotionSystemApplication <> 0 THEN
		ipMotionSystemApplication.std.Cycle();
		ipMotionSystemApplication.Cycle();
	END_IF
	
	FOR nForCounter := 1 TO moverCount DO
		IF ipMoverApplication[nforcounter] <> 0 THEN
			ipMotionSystemApplication.std.SetMoverStandard(nforcounter,ipMoverApplication[nForCounter].std);
			ipMoverApplication[nForCounter].std.P_Id :=UDINT_TO_UINT(nForCounter);
			ipMoverApplication[nforcounter].Cycle();
		END_IF
	END_FOR		
	
	FOR nForCounter:=1 TO nStationCount DO 
		IF ipStation[nForCounter] <> 0 THEN 
			ipStation[nForCounter].ccl00_cycle(); 
		END_IF
	END_FOR	
	
	FOR nForCounter := 1 TO trackCount DO
		IF ipTrack[nForCounter] <> 0 THEN
			ipMotionSystemApplication.std.SetTrackStandard(nForCounter, ipTrack[nForCounter].std);
			ipTrack[nForCounter].ccl00_cycle();
		END_IF
	END_FOR



//Visu
IF NOT bInit THEN
	IF ipMoverApplication[1] <> 0 THEN
		binit := TRUE;
		FOR nForCounter := 1 TO 4 DO 
			IF ipMoverApplication[nForCounter] <> 0 THEN
				fbVisu.SetStandardMover(ipMoverApplication[nForCounter].std, UDINT_TO_INT(nForCounter));
			END_IF
		END_FOR
	END_IF
END_IF
fbVisu.UpdateMoverStatus();	
		

	
	
	

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{99170f74-8a5c-4d90-a9c0-9a7baab20f1c}" FolderPath="StateMachine\">
      <Declaration><![CDATA[{attribute 'object_name' := 'Execute'}
METHOD PRIVATE Execute


	
VAR_INST
	nForCounter : UDINT;	


END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	
	FOR nForCounter:=1 TO nStationCount DO
		IF ipStation[nForCounter] <> 0 THEN
			ipStation[nForCounter].Processing(i_nMachineState:=2);
			
			IF ipStation[nForCounter].P_nErrorCode > 0 THEN
				nProcessFeedback := ipStation[nForCounter].P_nErrorCode;
			END_IF
		END_IF
	END_FOR	

	ipMotionSystemApplication.Execute();
	

	(*
	StateComplete();	// <- nothing will happen since there's no state defined after Execute,
						//    instead Execute can only be left by the Operator pressing the Abort-Button.
	*)
	
	
	
	
	
	
	
	
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="HoldOnError" Id="{4435bf4a-85c3-4f62-95f1-4c866745aeca}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD HoldOnError : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[


CASE nStateSequence OF
	0: 		
		IF ipMotionSystemApplication <> 0 THEN
			nStateSequence := 10;
		END_IF

	10:	
		IF nProcessFeedback = 0 THEN
			nStateSequence := 99;
		END_IF

	100:
		StateComplete();
END_CASE	




	]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_bErrorQuit" Id="{aab67f5f-e4b0-4c28-af2d-33c38f6dc910}" FolderPath="Prop\">
      <Declaration><![CDATA[PROPERTY P_bErrorQuit : BOOL]]></Declaration>
      <Set Name="Set" Id="{63adb9b7-2b18-478a-af70-f87b858b1da4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bErrorQuit := P_bErrorQuit;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_nProcessFeedback" Id="{57c9444c-0ef4-4280-9132-c14770f8b0c7}" FolderPath="Prop\">
      <Declaration><![CDATA[PROPERTY P_nProcessFeedback : UDINT]]></Declaration>
      <Get Name="Get" Id="{08aa22a2-7d38-47ac-b34c-6c5c70d753ae}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_nProcessFeedback := nProcessFeedback;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Prepared" Id="{f1e3999f-9118-437f-bcc6-f8d63ce1ea3f}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PRIVATE Prepared
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

	nTestCounter_Prepared := nTestCounter_Prepared +1;
	
	
	(*
		Prepared: 
		- all movers active (flying)
		- all movers in home position
	
	*)
	
	
	
	
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Preparing" Id="{c1781f5a-b0ea-422b-b0fc-13dc1f273270}" FolderPath="StateMachine\">
      <Declaration><![CDATA[{attribute 'object_name' := 'Preparing'}
METHOD PRIVATE Preparing
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nStateSequence OF
	0: 		

		FOR nForCounter:=1 TO nStationCount DO
			IF ipStation[nForCounter] <> 0 THEN
				ipStation[nForCounter].Processing(i_nMachineState:=1);				
				IF ipStation[nForCounter].P_nErrorCode > 0 THEN
					nProcessFeedback := ipStation[nForCounter].P_nErrorCode;
				END_IF
			END_IF
		END_FOR	
		
		
		IF ipMotionSystemApplication.Starting() THEN
			nStateSequence := 100;
		END_IF

	100:
		StateComplete();
END_CASE	





	
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resetting" Id="{5df3a141-8403-4d44-90e7-c138b8d43aa2}" FolderPath="StateMachine\">
      <Declaration><![CDATA[{attribute 'object_name' := 'Resetting'}
METHOD PRIVATE Resetting


]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nStateSequence OF
	0: 
		
		IF ipMotionSystemApplication.Resetting() THEN
			nStateSequence := 10;
		END_IF

	10:
		IF  ipStation[1].ClearList()
		AND ipStation[2].ClearList()
		AND ipStation[3].ClearList() 
		THEN
			nStateSequence := 100;
		END_IF
		
		
	100:
		StateComplete();
END_CASE	
	
	
	
	
	
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartUp" Id="{86fff464-db88-4fc6-adb6-eaf170c83f15}" FolderPath="StateMachine\">
      <Declaration><![CDATA[{attribute 'object_name' := 'StartUp'}
METHOD PRIVATE StartUp
VAR
	nForCounter : UDINT;
END_VAR


]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nStateSequence OF


	0: 	// XPlanar- or XTS-System?
		{IF defined (XPlanar)}	
		fbMotionSystem.std := THIS^.fbXPlanarSystem;
		{ELSIF defined (XTS)}
		fbMotionSystem.std := THIS^.fbXtsSystem;
		{END_IF}
		nStateSequence := 1;
		
	1:  // Mover assignment 
		FOR nForCounter := 1 TO moverCount DO
			{IF defined (XPlanar)}	
			fbMover[nForCounter].std := THIS^.fbXPlanarMover[nForCounter];
			{ELSIF defined (XTS)}
			fbMover[nForCounter].std := THIS^.fbXtsMover[nForCounter];
			{END_IF}
		END_FOR	
		nStateSequence := 2;
	
	2:	// Writing motion system to global motion system interface
		ipMotionSystemApplication := THIS^.fbMotionSystem;
		nStateSequence := 3;
			
	3:  // Writing movers to global mover interface
		FOR nForCounter := 1 TO moverCount DO
			ipMoverApplication[nForCounter] := THIS^.fbMover[nForCounter];
			THIS^.fbMover[nForCounter].P_nMoverIndex := UDINT_TO_INT(nForCounter); 
		END_FOR	
		nStateSequence := 4;

	4:  // Assigning Track-Interfaces
		ipTrack[1] := THIS^.fbTrackSegment01;
		ipTrack[2] := THIS^.fbTrackSegment02;
		ipTrack[3] := THIS^.fbTrackSegment03;	
		nStateSequence := 5;	
					
	5:  // Assigning Station-Interfaces
		ipStation[1] := THIS^.fbStation_01_Process;
        ipStation[2] := THIS^.fbStation_02_Process;		
        ipStation[3] := THIS^.fbStation_03_Process;			
		ipStation[4] := THIS^.fbStation_04_Switch;
		ipStation[5] := THIS^.fbStation_05_Switch;	
	
		bInterfaceAssignmentDone := TRUE;
		nStateSequence := 10;
	
	
	10: // Calling Application-Startup-Procedure	
		IF ipMotionSystemApplication.Startup() THEN
			nStateSequence := 100;
		END_IF
	

	100: // Start-up done
		StateComplete();
END_CASE	
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateComplete" Id="{efa57876-0831-454f-a042-1c2d85a9daa0}">
      <Declaration><![CDATA[{attribute 'object_name' := 'StateComplete'}
METHOD PRIVATE StateComplete
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	nTestCounter_StateComplete := nTestCounter_StateComplete + 1;

	nStateSequence := 0;
	
	//the actual state is completed
	fbStateManager.StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopped" Id="{2117dac9-3d56-4688-afc6-ac6587ef27f9}" FolderPath="StateMachine\">
      <Declaration><![CDATA[{attribute 'object_name' := 'Stopped'}
METHOD PRIVATE Stopped
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
	nTestCounter_Stopped := nTestCounter_Stopped + 1;


	(*
	
		Stopped: 
		- Production finished
		- …
		
	*)]]></ST>
      </Implementation>
    </Method>
    <Property Name="XCommand" Id="{a9d3fa4c-a4f5-4433-a743-aebfaa85bead}" FolderPath="Prop\">
      <Declaration><![CDATA[PROPERTY PUBLIC XCommand : E_XMotion_Command]]></Declaration>
      <Set Name="Set" Id="{8122debe-9ea1-4271-aeaf-3336954106ca}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[  eXCommand := XCommand;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="XMotionStatus" Id="{4f6321e0-0019-4191-964a-8c59abdf7131}" FolderPath="Prop\">
      <Declaration><![CDATA[PROPERTY PUBLIC XMotionStatus : E_XMotion_Status]]></Declaration>
      <Get Name="Get" Id="{d9fd0091-44c6-4472-ae91-0514c94aefc1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[   XMotionStatus := eXStatus;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="XSequenceStates" Id="{1b3e8b3b-2040-42a3-8711-c58a49f1d7f0}" FolderPath="Prop\">
      <Declaration><![CDATA[PROPERTY XSequenceStates : ST_XMotionStatemachineStates]]></Declaration>
      <Get Name="Get" Id="{f9d055e3-acf3-45da-b377-b42b412c08a5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[XSequenceStates := stSequenceStates;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>