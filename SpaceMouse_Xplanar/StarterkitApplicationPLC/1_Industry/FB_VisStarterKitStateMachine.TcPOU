<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_VisStarterKitStateMachine" Id="{f9b3f4dd-c749-4dfe-a1f3-0917163c9821}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_VisStarterKitStateMachine

VAR_IN_OUT

	iq_stVisControl  : ST_VisControl;
	iq_XTags		 : ST_XTags;
		
END_VAR


VAR
		
	diStatusOld : DINT := -1;
	
	
	// Operator-Control-Pad 
	bOCStartButton			: BOOL;
	bOCStopButton			: BOOL;
	bOCQuitButton			: BOOL;
	bOCEStopButton			: BOOL;
	
	bOCStopLamp				: BOOL;
	bOCStartLamp			: BOOL;
	bOCQuitLamp				: BOOL;
	bOCEStopLamp			: BOOL;
	
	bOCMessageColorGreen	: BOOL;
	bOCMessageColorRed		: BOOL;	
	
	sOCResultText			: STRING;
	sDisplayText			: STRING;
	nStringPosition			: INT;
	nStringLength			: INT;
	nDisplayLenght			: INT := 28;
		
	nOCResultNumber			: INT;
	DisplayTimer			: TON;
	
	rtNoCommandTrigger		: R_TRIG;
	
	bInitScreenDone			: BOOL;
	nVisArrangement			: INT;
	nVisArrangementMem		: INT;
	nVisArrangementSet		: INT;
	
END_VAR



]]></Declaration>
    <Implementation>
      <ST><![CDATA[


	ScreenArrangement();
	
	StarterKitStateMachine();

	OperatorInterface();
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	]]></ST>
    </Implementation>
    <Property Name="bOCEStopButtonState" Id="{138a2442-2ee4-45d3-8270-f821ba5b85eb}">
      <Declaration><![CDATA[PROPERTY PUBLIC bOCEStopButtonState : BOOL]]></Declaration>
      <Get Name="Get" Id="{b91b74c0-a236-478b-8f20-e19fb67cc3e0}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bOCEStopButtonState := bOCEStopButton;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bOCEStopLampState" Id="{dd3a7b26-d770-4b8d-8ed4-5bc7e9c92b58}">
      <Declaration><![CDATA[PROPERTY PUBLIC bOCEStopLampState : BOOL]]></Declaration>
      <Set Name="Set" Id="{b0f14041-391a-44a1-bd5b-67464ca94f5c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bOCEStopLamp := bOCEStopLampState;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="bOCQuitButtonState" Id="{57f53cff-1cd6-4e0c-9cea-41b1781ab0d6}">
      <Declaration><![CDATA[PROPERTY PUBLIC bOCQuitButtonState : BOOL]]></Declaration>
      <Get Name="Get" Id="{7b0455c0-882d-441d-945e-cefb73642f51}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bOCQuitButtonState := bOCQuitButton;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bOCQuitLampState" Id="{08179a8f-8dad-4756-9b70-3862fc97e745}">
      <Declaration><![CDATA[PROPERTY PUBLIC bOCQuitLampState : BOOL]]></Declaration>
      <Set Name="Set" Id="{7f057a45-6efe-4e2c-862e-380155db27c8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bOCQuitLamp := bOCQuitLampState;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="bOCStartButtonState" Id="{e66b5437-c1b8-49ae-9dc8-beda909ae9a9}">
      <Declaration><![CDATA[PROPERTY PUBLIC bOCStartButtonState : BOOL]]></Declaration>
      <Get Name="Get" Id="{a45d8868-af2b-40f2-9825-b9ac2029357c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bOCStartButtonState := bOCStartButton;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bOCStartLampState" Id="{725a65a7-1867-47e8-bcde-bdf73640259c}">
      <Declaration><![CDATA[PROPERTY PUBLIC bOCStartLampState : BOOL]]></Declaration>
      <Set Name="Set" Id="{71bbaf7d-7f17-4350-9e31-d9f16219d7e1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bOCStartLamp := bOCStartLampState;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="bOCStopButtonState" Id="{aa45f8fa-6c53-4eed-8cdb-0995130a9f07}">
      <Declaration><![CDATA[PROPERTY PUBLIC bOCStopButtonState : BOOL]]></Declaration>
      <Get Name="Get" Id="{cb1c127b-3b3b-4b29-8677-6ec751b36ee1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bOCStopButtonState := bOCStopButton;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bOCStopLampState" Id="{11074bf8-5576-4f45-8f50-1c0327e298e9}">
      <Declaration><![CDATA[PROPERTY PUBLIC bOCStopLampState : BOOL]]></Declaration>
      <Set Name="Set" Id="{418747e3-fd55-485d-b8de-7ec32d3acab1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bOCStopLamp := bOCStopLampState;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="nOCResult" Id="{8df3dde6-861b-4013-921e-9fe3ba1a90a3}">
      <Declaration><![CDATA[PROPERTY PUBLIC nOCResult : int]]></Declaration>
      <Set Name="Set" Id="{7b27e2a1-f457-46e3-83b2-25c04299918a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nOCResultNumber := nOCResult;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Action Name="OperatorInterface" Id="{88d93bbf-490d-4613-ac73-b6fb59fc9715}">
      <Implementation>
        <ST><![CDATA[


	

		
		
		bOCStartButton 	:= iq_stVisControl.stOperatorPad.bStartButtunState;
		bOCStopButton  	:= iq_stVisControl.stOperatorPad.bStopButtonState; 
		bOCQuitButton	:= iq_stVisControl.stOperatorPad.bQuitButtonState;
		bOCEStopButton	:= iq_stVisControl.stOperatorPad.bEStopButtonState;
		
		
		iq_stVisControl.stOperatorPad.bStartButtonLamp 		:= bOCStartLamp;
		iq_stVisControl.stOperatorPad.bStopButtonLamp  		:= bOCStopLamp;
		iq_stVisControl.stOperatorPad.bQuitButtonLamp  		:= bOCQuitLamp;
		iq_stVisControl.stOperatorPad.bEStopButtonLamp 		:= bOCEStopLamp;
		iq_stVisControl.stOperatorPad.bMessageColorGreen 	:= bOCMessageColorGreen;
		iq_stVisControl.stOperatorPad.bMessageColorRed   	:= bOCMessageColorRed;
		
			
		nStringLength := LEN(sOCResultText);	
		IF nStringLength > nDisplayLenght THEN
			sDisplayText := MID(sOCResultText,nDisplayLenght,nStringPosition);
		
			DisplayTimer(IN:=TRUE, PT:=T#500MS);
			IF DisplayTimer.Q THEN
				DisplayTimer(IN:=FALSE);
				nStringPosition := nStringPosition +1;
				
				IF nStringPosition > (nStringLength - nDisplayLenght) THEN
					nStringPosition := 1;
				END_IF
			END_IF
		ELSE
			sDisplayText := sOCResultText;
		END_IF
		iq_stVisControl.stOperatorPad.sMessage := sDisplayText;
		
		]]></ST>
      </Implementation>
    </Action>
    <Action Name="ScreenArrangement" Id="{c4bd7d9c-a7ab-4c56-8320-4f267e2778a5}">
      <Implementation>
        <ST><![CDATA[





	// Decide which Pad shall be shown at system boot:
	IF NOT bInitScreenDone THEN
		bInitScreenDone := TRUE;

		iq_stVisControl.stControlPad.bVisInvisibleButton  := FALSE;		
		iq_stVisControl.stOperatorPad.bVisInvisibleButton := FALSE;
	END_IF


	// Check which Pad shall be shown right now:
	IF iq_stVisControl.stControlPad.bVisInvisibleButton THEN
		iq_stVisControl.stControlPad.bVisInvisible := TRUE;
	ELSE
		iq_stVisControl.stControlPad.bVisInvisible := FALSE;
	END_IF	

	IF iq_stVisControl.stOperatorPad.bVisInvisibleButton THEN
		iq_stVisControl.stOperatorPad.bVisInvisible := TRUE;
	ELSE
		iq_stVisControl.stOperatorPad.bVisInvisible := FALSE;
	END_IF		
	

	// Determine current visualisation arrangement:
	IF  iq_stVisControl.stControlPad.bVisInvisible 
	AND iq_stVisControl.stOperatorPad.bVisInvisible
	THEN
		nVisArrangement := 1;
		
	ELSIF ( NOT iq_stVisControl.stControlPad.bVisInvisible
			AND iq_stVisControl.stOperatorPad.bVisInvisible) 
	THEN
		nVisArrangement := 2;
		
	ELSIF ( NOT iq_stVisControl.stOperatorPad.bVisInvisible 
			AND iq_stVisControl.stControlPad.bVisInvisible )
	THEN
		nVisArrangement := 3;
	ELSIF (     NOT iq_stVisControl.stControlPad.bVisInvisible 
			AND NOT iq_stVisControl.stOperatorPad.bVisInvisible)
	THEN
		nVisArrangement := 4;
	END_IF
	
	
	
	// Arranging all frame positions according to current arrangement:
	IF nVisArrangement <> nVisArrangementMem THEN
		nVisArrangementMem := nVisArrangement;
		nVisArrangementSet := nVisArrangement;
	END_IF
		
	CASE nVisArrangementSet OF 	
	
	1:  nVisArrangementSet := 0;
		
		iq_stVisControl.stControlPad.nFramePositionX   :=  0;
		iq_stVisControl.stControlPad.nFramePositionY   :=  0;
		iq_stVisControl.stControlPad.nButtonPositionX  :=  0;
		iq_stVisControl.stControlPad.nButtonPositionY  := 55;
		
		iq_stVisControl.stOperatorPad.nFramePositionX  :=  0;
		iq_stVisControl.stOperatorPad.nFramePositionY  :=  0;
		iq_stVisControl.stOperatorPad.nButtonPositionX :=  0;
		iq_stVisControl.stOperatorPad.nButtonPositionY := 55;
				
	2: 	nVisArrangementSet := 0;
	
		iq_stVisControl.stControlPad.nFramePositionX   :=  0;
		iq_stVisControl.stControlPad.nFramePositionY   := 60;	
		iq_stVisControl.stOperatorPad.nButtonPositionX :=  0;
		iq_stVisControl.stOperatorPad.nButtonPositionY := 55;	
	
	3:	nVisArrangementSet := 0;
	
		iq_stVisControl.stControlPad.nButtonPositionX  :=  0;
		iq_stVisControl.stControlPad.nButtonPositionY  := -2;
		iq_stVisControl.stOperatorPad.nFramePositionX  :=  0;
		iq_stVisControl.stOperatorPad.nFramePositionY  :=  0;
	
	4:	nVisArrangementSet := 0;
	
		iq_stVisControl.stControlPad.nFramePositionX   :=  0;
		iq_stVisControl.stControlPad.nFramePositionY   :=  0;
		iq_stVisControl.stOperatorPad.nFramePositionX  :=  0;
		iq_stVisControl.stOperatorPad.nFramePositionY  :=  0;
	
	END_CASE
	

	
	
	
	
	
	
	]]></ST>
      </Implementation>
    </Action>
    <Property Name="sOCResultTextDisplay" Id="{fa428454-8dd3-4dcd-acb5-f611c263cbd7}">
      <Declaration><![CDATA[PROPERTY PUBLIC sOCResultTextDisplay : STRING]]></Declaration>
      <Set Name="Set" Id="{a01f762a-216e-4658-95d6-2f5732ac8536}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sOCResultText := sOCResultTextDisplay;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Action Name="StarterKitStateMachine" Id="{a1648d0d-8b70-4813-bbac-b57c7bcf8682}">
      <Implementation>
        <ST><![CDATA[

	// Setting XTag-Commands according to user-commands
	IF    iq_stVisControl.stControlPad.bButtonState_Abort THEN
				rtNoCommandTrigger(CLK:=FALSE);
				iq_XTags.Command  := E_XMotion_Command.Abort;	
	ELSIF iq_stVisControl.stControlPad.bButtonState_Reset THEN
				rtNoCommandTrigger(CLK:=FALSE);
				iq_XTags.Command  := E_XMotion_Command.Reset;	
	ELSIF iq_stVisControl.stControlPad.bButtonState_Prepare THEN
				rtNoCommandTrigger(CLK:=FALSE);
				iq_XTags.Command  := E_XMotion_Command.Prepare;	
	ELSIF iq_stVisControl.stControlPad.bButtonState_Start THEN
				rtNoCommandTrigger(CLK:=FALSE);
				iq_XTags.Command  := E_XMotion_Command.Start;	
	ELSE
			rtNoCommandTrigger(CLK:=TRUE);
			IF rtNoCommandTrigger.Q THEN
				iq_XTags.Command  := E_XMotion_Command.NoCommand;
			END_IF
	END_IF


	
	
	// Setting Vis display according to current status	
	iq_stVisControl.stControlPad.iAbortSequenceState   := iq_XTags.States.nAbortState;
	iq_stVisControl.stControlPad.iResetSequenceState   := iq_XTags.States.nResetState;
	iq_stVisControl.stControlPad.iPrepareSequenceState := iq_XTags.States.nPrepareState;
	iq_stVisControl.stControlPad.iStartSequenceState   := iq_XTags.States.nStartState;
	

	IF iq_XTags.Status <> diStatusOld THEN
		diStatusOld := iq_XTags.Status;	
	
		iq_stVisControl.stControlPad.bAbortSequenceStateInvisible 	:= TRUE;
		iq_stVisControl.stControlPad.bResetSequenceStateInvisible 	:= TRUE;
		iq_stVisControl.stControlPad.bPrepareSequenceStateInvisible := TRUE;
		iq_stVisControl.stControlPad.bStartSequenceStateInvisible	:= TRUE;
		
		iq_stVisControl.stControlPad.bStateSignalAbortBlue     := FALSE;
		iq_stVisControl.stControlPad.bStateSignalAbortYellow   := FALSE;
		iq_stVisControl.stControlPad.bStateSignalAbortGreen    := FALSE;
		iq_stVisControl.stControlPad.bStateSignalResetYellow   := FALSE;
		iq_stVisControl.stControlPad.bStateSignalResetGreen    := FALSE;		
		iq_stVisControl.stControlPad.bStateSignalResetYellow   := FALSE;
		iq_stVisControl.stControlPad.bStateSignalResetGreen    := FALSE;		
		iq_stVisControl.stControlPad.bStateSignalPrepareYellow := FALSE;
		iq_stVisControl.stControlPad.bStateSignalPrepareGreen  := FALSE;		
		iq_stVisControl.stControlPad.bStateSignalExecuteYellow := FALSE;
		iq_stVisControl.stControlPad.bStateSignalExecuteGreen  := FALSE;	

		IF 	   iq_XTags.Status = E_XMotion_Status.Aborting THEN
					iq_stVisControl.stControlPad.bAbortSequenceStateInvisible := FALSE;
					iq_stVisControl.stControlPad.bStateSignalAbortYellow   	  := TRUE;		
		ELSIF iq_XTags.Status = E_XMotion_Status.Aborted THEN
					iq_stVisControl.stControlPad.bStateSignalAbortGreen := TRUE;
		ELSIF iq_XTags.Status = E_XMotion_Status.Resetting THEN
					iq_stVisControl.stControlPad.bResetSequenceStateInvisible := FALSE;
					iq_stVisControl.stControlPad.bStateSignalResetYellow      := TRUE;
		ELSIF iq_XTags.Status = E_XMotion_Status.Stopped THEN
					iq_stVisControl.stControlPad.bStateSignalResetGreen := TRUE;
		ELSIF iq_XTags.Status = E_XMotion_Status.Preparing THEN
					iq_stVisControl.stControlPad.bPrepareSequenceStateInvisible := FALSE;
					iq_stVisControl.stControlPad.bStateSignalPrepareYellow      := TRUE;
		ELSIF iq_XTags.Status = E_XMotion_Status.Prepared THEN
					iq_stVisControl.stControlPad.bStateSignalPrepareGreen := TRUE;
		ELSIF iq_XTags.Status = E_XMotion_Status.Execute THEN
					iq_stVisControl.stControlPad.bStartSequenceStateInvisible := FALSE;
					iq_stVisControl.stControlPad.bStateSignalExecuteGreen     := TRUE;
		ELSIF iq_XTags.Status = E_XMotion_Status.StartUp THEN
					iq_stVisControl.stControlPad.bStateSignalAbortBlue := TRUE;
		END_IF	

	END_IF
	
	]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>